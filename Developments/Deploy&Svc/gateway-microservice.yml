apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: disloman
  labels:
    app: disloman
    name: gateway
spec:
  ports:
  - protocol: TCP
    # Rappresenta il numero di porta utilzzato dagli altri Servizi all'interno del Cluster per comunicare con il servizio stesso.
    # Gli altri Service del cluster per comunicare con questo Servizio dovranno quindi fare riferimento al suo DNS NAME e PORT NUMER
    port: 8080
    targetPort: web
  selector:
    app: gateway
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-microservice
  namespace: disloman
  labels:
    app: disloman
    name: gateway
    version: 1.0.0-SNAPSHOT
spec:
  replicas: 1
  selector:
    matchLabels:
        app: gateway
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # Il Rolling Update avverrà tirando giù un Pod alla volta
      maxUnavailable: 1
      # Il Rolling Update avverrà senza avere più di 1 extra Pod esistente rispetto a quelli complessivi stabiliti da
      maxSurge: 1
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway-service
        image: drugotosto84/zuul-service:1.0.0-SNAPSHOT
        imagePullPolicy: Always
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kub"
        # Lista delle porte che il dato container espone (solitamente 1) e che sono quindi accoppiate con quelle definite all'interno del suo Dockerfile (non è necesseria definirla) e che sarà accoppiata alla TargetPort del Service Object.
        # Sulla data porta ci sarà in ascolto una determinata applicazione
        ports:
        - name: web
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10

